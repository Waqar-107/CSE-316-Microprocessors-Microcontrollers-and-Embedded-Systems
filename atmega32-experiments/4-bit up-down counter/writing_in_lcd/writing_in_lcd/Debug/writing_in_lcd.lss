
writing_in_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000353  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019a  00000000  00000000  000005b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019e  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  000008ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028b  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000105  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 80 00 	call	0x100	; 0x100 <main>
  7a:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z14lcd_data_writec>:
#define lcd_rw PD1		// 0/1: write/read mode
#define lcd_en PD2		// must be high to perform read/write

void lcd_data_write(char data)
{
	lcd_control_port=_BV(lcd_en) | _BV(lcd_rs); //_BV(n) means 1<<n, BV stands for "Bit Value"
  82:	95 e0       	ldi	r25, 0x05	; 5
  84:	92 bb       	out	0x12, r25	; 18
	lcd_data_port=data;
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	89 ef       	ldi	r24, 0xF9	; 249
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <_Z14lcd_data_writec+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_Z14lcd_data_writec+0x10>
  92:	00 00       	nop
	
	_delay_ms(1);
	
	lcd_control_port=_BV(lcd_rs);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	82 bb       	out	0x12, r24	; 18
  98:	89 ef       	ldi	r24, 0xF9	; 249
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <_Z14lcd_data_writec+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_Z14lcd_data_writec+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <_Z17lcd_command_writec>:
	
}

void lcd_command_write(char command)
{
	lcd_control_port=_BV(lcd_en);
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	92 bb       	out	0x12, r25	; 18
	lcd_data_port=command;
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	89 ef       	ldi	r24, 0xF9	; 249
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <_Z17lcd_command_writec+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <_Z17lcd_command_writec+0x10>
  b6:	00 00       	nop
	
	_delay_ms(1);
	
	lcd_control_port=0x00;
  b8:	12 ba       	out	0x12, r1	; 18
  ba:	89 ef       	ldi	r24, 0xF9	; 249
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <_Z17lcd_command_writec+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_Z17lcd_command_writec+0x1e>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <_Z8lcd_initv>:
	_delay_ms(1);
}

void lcd_init()
{
	lcd_command_write(0x38);	// 2 lines and 5×7 matrix
  c8:	88 e3       	ldi	r24, 0x38	; 56
  ca:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z17lcd_command_writec>
	lcd_command_write(0x01);	// clear display screen
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z17lcd_command_writec>
	lcd_command_write(0x06);	// increment cursor (shift cursor to right)
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z17lcd_command_writec>
	lcd_command_write(0x0E);	// display ON, cursor blinking
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z17lcd_command_writec>
  e0:	08 95       	ret

000000e2 <_Z13lcd_str_writePc>:
}

void lcd_str_write(char *str)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
	while(*str)
  e8:	88 81       	ld	r24, Y
  ea:	88 23       	and	r24, r24
  ec:	31 f0       	breq	.+12     	; 0xfa <_Z13lcd_str_writePc+0x18>
  ee:	21 96       	adiw	r28, 0x01	; 1
		lcd_data_write(*str++);
  f0:	0e 94 41 00 	call	0x82	; 0x82 <_Z14lcd_data_writec>
	lcd_command_write(0x0E);	// display ON, cursor blinking
}

void lcd_str_write(char *str)
{
	while(*str)
  f4:	89 91       	ld	r24, Y+
  f6:	81 11       	cpse	r24, r1
  f8:	fb cf       	rjmp	.-10     	; 0xf0 <_Z13lcd_str_writePc+0xe>
		lcd_data_write(*str++);
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <main>:

int main(void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	2c 97       	sbiw	r28, 0x0c	; 12
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
	DDRD=0b00000111;	// PD0,PD1 and PD1 for controls
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	81 bb       	out	0x11, r24	; 17
    
	char fr[]="CSE'15";
 118:	e0 e6       	ldi	r30, 0x60	; 96
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	de 01       	movw	r26, r28
 11e:	11 96       	adiw	r26, 0x01	; 1
 120:	01 90       	ld	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	8a 95       	dec	r24
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x20>
	char sr[]="BUET";
 128:	85 e0       	ldi	r24, 0x05	; 5
 12a:	e7 e6       	ldi	r30, 0x67	; 103
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	de 01       	movw	r26, r28
 130:	18 96       	adiw	r26, 0x08	; 8
 132:	01 90       	ld	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	8a 95       	dec	r24
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x32>
	
	lcd_init();
 13a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8lcd_initv>
	lcd_str_write(fr);
 13e:	ce 01       	movw	r24, r28
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z13lcd_str_writePc>
	lcd_command_write(0xc0);	//cursor moved to next rowm first col 
 146:	80 ec       	ldi	r24, 0xC0	; 192
 148:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z17lcd_command_writec>
	lcd_str_write(sr);
 14c:	ce 01       	movw	r24, r28
 14e:	08 96       	adiw	r24, 0x08	; 8
 150:	0e 94 71 00 	call	0xe2	; 0xe2 <_Z13lcd_str_writePc>
}
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2c 96       	adiw	r28, 0x0c	; 12
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
