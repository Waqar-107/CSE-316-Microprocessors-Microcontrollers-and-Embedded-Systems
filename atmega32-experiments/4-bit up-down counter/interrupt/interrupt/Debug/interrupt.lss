
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000150  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  000001e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000199  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000ed  00000000  00000000  000003df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000166  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d7  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  8a:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:

//masking variable
unsigned char ma=0b00001111;

ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	if(cnt==15)
  a2:	80 91 62 00 	lds	r24, 0x0062
  a6:	8f 30       	cpi	r24, 0x0F	; 15
  a8:	19 f4       	brne	.+6      	; 0xb0 <__vector_1+0x1e>
		cnt=0;
  aa:	10 92 62 00 	sts	0x0062, r1
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <__vector_1+0x24>
	else
		cnt++;
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 62 00 	sts	0x0062, r24
		
	PORTA=cnt & ma;
  b6:	90 91 60 00 	lds	r25, 0x0060
  ba:	80 91 62 00 	lds	r24, 0x0062
  be:	89 23       	and	r24, r25
  c0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f e3       	ldi	r18, 0x3F	; 63
  c4:	8d e0       	ldi	r24, 0x0D	; 13
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <__vector_1+0x36>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <__vector_1+0x40>
  d2:	00 00       	nop
	_delay_ms(1000);
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <__vector_2>:


ISR(INT1_vect)
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	if(cnt==0)
  f4:	80 91 62 00 	lds	r24, 0x0062
  f8:	81 11       	cpse	r24, r1
  fa:	04 c0       	rjmp	.+8      	; 0x104 <__vector_2+0x20>
		cnt=15;
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	80 93 62 00 	sts	0x0062, r24
 102:	03 c0       	rjmp	.+6      	; 0x10a <__vector_2+0x26>
	else
		cnt--;
 104:	81 50       	subi	r24, 0x01	; 1
 106:	80 93 62 00 	sts	0x0062, r24
		
	PORTA=cnt & ma;
 10a:	90 91 60 00 	lds	r25, 0x0060
 10e:	80 91 62 00 	lds	r24, 0x0062
 112:	89 23       	and	r24, r25
 114:	8b bb       	out	0x1b, r24	; 27
 116:	2f e3       	ldi	r18, 0x3F	; 63
 118:	8d e0       	ldi	r24, 0x0D	; 13
 11a:	93 e0       	ldi	r25, 0x03	; 3
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <__vector_2+0x38>
 124:	00 c0       	rjmp	.+0      	; 0x126 <__vector_2+0x42>
 126:	00 00       	nop
	_delay_ms(1000);
}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <main>:

int main(void)
{
	//output in A
	DDRA=0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	8a bb       	out	0x1a, r24	; 26
	
	
	
	cnt=0;
 13c:	10 92 62 00 	sts	0x0062, r1
	
	GICR=(1<<INT0) | (1<<INT1);	//enable external interrupts INT0 and INT1
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(1<<ISC00) | (1<<ISC10);
 144:	85 e0       	ldi	r24, 0x05	; 5
 146:	85 bf       	out	0x35, r24	; 53
	
	sei();
 148:	78 94       	sei
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x12>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
