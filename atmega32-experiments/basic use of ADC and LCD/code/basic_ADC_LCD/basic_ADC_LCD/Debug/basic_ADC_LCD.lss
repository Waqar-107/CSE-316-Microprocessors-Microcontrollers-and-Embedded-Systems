
basic_ADC_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000a06  00000a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000011f1  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000235  00000000  00000000  00001d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004ac  00000000  00000000  00001fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001c4  00000000  00000000  00002450  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000303  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000006d1  00000000  00000000  00002917  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b8  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 98 02 	call	0x530	; 0x530 <main>
  7a:	0c 94 01 05 	jmp	0xa02	; 0xa02 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pinChange>:
	pinChange(D3,1);
	else
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
  82:	67 2b       	or	r22, r23
  84:	09 f0       	breq	.+2      	; 0x88 <pinChange+0x6>
  86:	9f c0       	rjmp	.+318    	; 0x1c6 <pinChange+0x144>
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	11 f4       	brne	.+4      	; 0x90 <pinChange+0xe>
  8c:	d8 98       	cbi	0x1b, 0	; 27
	else
	pinChange(D4,0);
  8e:	08 95       	ret
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	91 05       	cpc	r25, r1
  94:	11 f4       	brne	.+4      	; 0x9a <pinChange+0x18>
  96:	d9 98       	cbi	0x1b, 1	; 27
  98:	08 95       	ret

	if(a & 32)
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	91 05       	cpc	r25, r1
	pinChange(D5,1);
  9e:	11 f4       	brne	.+4      	; 0xa4 <pinChange+0x22>
  a0:	da 98       	cbi	0x1b, 2	; 27
  a2:	08 95       	ret
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	91 05       	cpc	r25, r1
  a8:	11 f4       	brne	.+4      	; 0xae <pinChange+0x2c>
  aa:	db 98       	cbi	0x1b, 3	; 27
	else
	pinChange(D5,0);
  ac:	08 95       	ret
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	91 05       	cpc	r25, r1
  b2:	11 f4       	brne	.+4      	; 0xb8 <pinChange+0x36>
  b4:	dc 98       	cbi	0x1b, 4	; 27
  b6:	08 95       	ret
	
	if(a & 64)
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	91 05       	cpc	r25, r1
	pinChange(D6,1);
  bc:	11 f4       	brne	.+4      	; 0xc2 <pinChange+0x40>
  be:	dd 98       	cbi	0x1b, 5	; 27
  c0:	08 95       	ret
  c2:	86 30       	cpi	r24, 0x06	; 6
  c4:	91 05       	cpc	r25, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <pinChange+0x4a>
  c8:	de 98       	cbi	0x1b, 6	; 27
	else
	pinChange(D6,0);
  ca:	08 95       	ret
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	91 05       	cpc	r25, r1
  d0:	11 f4       	brne	.+4      	; 0xd6 <pinChange+0x54>
  d2:	df 98       	cbi	0x1b, 7	; 27
  d4:	08 95       	ret
	
	if(a & 128)
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
	pinChange(D7,1);
  da:	11 f4       	brne	.+4      	; 0xe0 <pinChange+0x5e>
  dc:	c0 98       	cbi	0x18, 0	; 24
  de:	08 95       	ret
  e0:	8b 30       	cpi	r24, 0x0B	; 11
  e2:	91 05       	cpc	r25, r1
  e4:	11 f4       	brne	.+4      	; 0xea <pinChange+0x68>
  e6:	c1 98       	cbi	0x18, 1	; 24
	else
	pinChange(D7,0);
  e8:	08 95       	ret
  ea:	8c 30       	cpi	r24, 0x0C	; 12
  ec:	91 05       	cpc	r25, r1
  ee:	11 f4       	brne	.+4      	; 0xf4 <pinChange+0x72>
  f0:	c2 98       	cbi	0x18, 2	; 24
  f2:	08 95       	ret
}
  f4:	8d 30       	cpi	r24, 0x0D	; 13
  f6:	91 05       	cpc	r25, r1
		  PORTB &= ~(1<<PB0);  
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
		else if(a == eS_PORTB2)
		  PORTB &= ~(1<<PB2);  
		else if(a == eS_PORTB3)
  f8:	11 f4       	brne	.+4      	; 0xfe <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
  fa:	c3 98       	cbi	0x18, 3	; 24
  fc:	08 95       	ret
		else if(a == eS_PORTB4)
  fe:	8e 30       	cpi	r24, 0x0E	; 14
 100:	91 05       	cpc	r25, r1
 102:	11 f4       	brne	.+4      	; 0x108 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
 104:	c4 98       	cbi	0x18, 4	; 24
 106:	08 95       	ret
		else if(a == eS_PORTB5)
 108:	8f 30       	cpi	r24, 0x0F	; 15
 10a:	91 05       	cpc	r25, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
 10e:	c5 98       	cbi	0x18, 5	; 24
 110:	08 95       	ret
		else if(a == eS_PORTB6)
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	91 05       	cpc	r25, r1
 116:	11 f4       	brne	.+4      	; 0x11c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
 118:	c6 98       	cbi	0x18, 6	; 24
 11a:	08 95       	ret
		else if(a == eS_PORTB7)
 11c:	81 31       	cpi	r24, 0x11	; 17
 11e:	91 05       	cpc	r25, r1
 120:	11 f4       	brne	.+4      	; 0x126 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
 122:	c7 98       	cbi	0x18, 7	; 24
 124:	08 95       	ret
		else if(a == eS_PORTC0)
 126:	84 31       	cpi	r24, 0x14	; 20
 128:	91 05       	cpc	r25, r1
 12a:	11 f4       	brne	.+4      	; 0x130 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
 12c:	a8 98       	cbi	0x15, 0	; 21
 12e:	08 95       	ret
		else if(a == eS_PORTC1)
 130:	85 31       	cpi	r24, 0x15	; 21
 132:	91 05       	cpc	r25, r1
 134:	11 f4       	brne	.+4      	; 0x13a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
 136:	a9 98       	cbi	0x15, 1	; 21
 138:	08 95       	ret
		else if(a == eS_PORTC2)
 13a:	86 31       	cpi	r24, 0x16	; 22
 13c:	91 05       	cpc	r25, r1
 13e:	11 f4       	brne	.+4      	; 0x144 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
 140:	aa 98       	cbi	0x15, 2	; 21
 142:	08 95       	ret
		else if(a == eS_PORTC3)
 144:	87 31       	cpi	r24, 0x17	; 23
 146:	91 05       	cpc	r25, r1
 148:	11 f4       	brne	.+4      	; 0x14e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
 14a:	ab 98       	cbi	0x15, 3	; 21
 14c:	08 95       	ret
		else if(a == eS_PORTC4)
 14e:	88 31       	cpi	r24, 0x18	; 24
 150:	91 05       	cpc	r25, r1
 152:	11 f4       	brne	.+4      	; 0x158 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
 154:	ac 98       	cbi	0x15, 4	; 21
 156:	08 95       	ret
		else if(a == eS_PORTC5)
 158:	89 31       	cpi	r24, 0x19	; 25
 15a:	91 05       	cpc	r25, r1
 15c:	11 f4       	brne	.+4      	; 0x162 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
 15e:	ad 98       	cbi	0x15, 5	; 21
 160:	08 95       	ret
        else if(a == eS_PORTC6)
 162:	8a 31       	cpi	r24, 0x1A	; 26
 164:	91 05       	cpc	r25, r1
 166:	11 f4       	brne	.+4      	; 0x16c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
 168:	ae 98       	cbi	0x15, 6	; 21
 16a:	08 95       	ret
		else if(a == eS_PORTC7)
 16c:	8b 31       	cpi	r24, 0x1B	; 27
 16e:	91 05       	cpc	r25, r1
 170:	11 f4       	brne	.+4      	; 0x176 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
 172:	af 98       	cbi	0x15, 7	; 21
 174:	08 95       	ret
		else if(a == eS_PORTD0)
 176:	8e 31       	cpi	r24, 0x1E	; 30
 178:	91 05       	cpc	r25, r1
 17a:	11 f4       	brne	.+4      	; 0x180 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
 17c:	90 98       	cbi	0x12, 0	; 18
 17e:	08 95       	ret
		else if(a == eS_PORTD1)
 180:	8f 31       	cpi	r24, 0x1F	; 31
 182:	91 05       	cpc	r25, r1
 184:	11 f4       	brne	.+4      	; 0x18a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
 186:	91 98       	cbi	0x12, 1	; 18
 188:	08 95       	ret
		else if(a == eS_PORTD2)
 18a:	80 32       	cpi	r24, 0x20	; 32
 18c:	91 05       	cpc	r25, r1
 18e:	11 f4       	brne	.+4      	; 0x194 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
 190:	92 98       	cbi	0x12, 2	; 18
 192:	08 95       	ret
		else if(a == eS_PORTD3)
 194:	81 32       	cpi	r24, 0x21	; 33
 196:	91 05       	cpc	r25, r1
 198:	11 f4       	brne	.+4      	; 0x19e <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
 19a:	93 98       	cbi	0x12, 3	; 18
 19c:	08 95       	ret
		else if(a == eS_PORTD4)
 19e:	82 32       	cpi	r24, 0x22	; 34
 1a0:	91 05       	cpc	r25, r1
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
 1a4:	94 98       	cbi	0x12, 4	; 18
 1a6:	08 95       	ret
		else if(a == eS_PORTD5)
 1a8:	83 32       	cpi	r24, 0x23	; 35
 1aa:	91 05       	cpc	r25, r1
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
 1ae:	95 98       	cbi	0x12, 5	; 18
 1b0:	08 95       	ret
		else if(a == eS_PORTD6)
 1b2:	84 32       	cpi	r24, 0x24	; 36
 1b4:	91 05       	cpc	r25, r1
 1b6:	11 f4       	brne	.+4      	; 0x1bc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1b8:	96 98       	cbi	0x12, 6	; 18
 1ba:	08 95       	ret
		else if(a == eS_PORTD7)
 1bc:	85 97       	sbiw	r24, 0x25	; 37
 1be:	09 f0       	breq	.+2      	; 0x1c2 <pinChange+0x140>
 1c0:	9f c0       	rjmp	.+318    	; 0x300 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
 1c2:	97 98       	cbi	0x12, 7	; 18
 1c4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x14c>
		  PORTA |= (1<<PA0);
 1ca:	d8 9a       	sbi	0x1b, 0	; 27
 1cc:	08 95       	ret
		else if(a == eS_PORTA1)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
 1d4:	d9 9a       	sbi	0x1b, 1	; 27
 1d6:	08 95       	ret
		else if(a == eS_PORTA2)
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	91 05       	cpc	r25, r1
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
 1de:	da 9a       	sbi	0x1b, 2	; 27
 1e0:	08 95       	ret
		else if(a == eS_PORTA3)
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	91 05       	cpc	r25, r1
 1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x16a>
		  PORTA |= (1<<PA3);
 1e8:	db 9a       	sbi	0x1b, 3	; 27
 1ea:	08 95       	ret
		else if(a == eS_PORTA4)
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	91 05       	cpc	r25, r1
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x174>
		  PORTA |= (1<<PA4);
 1f2:	dc 9a       	sbi	0x1b, 4	; 27
 1f4:	08 95       	ret
		else if(a == eS_PORTA5)
 1f6:	85 30       	cpi	r24, 0x05	; 5
 1f8:	91 05       	cpc	r25, r1
 1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
 1fc:	dd 9a       	sbi	0x1b, 5	; 27
 1fe:	08 95       	ret
		else if(a == eS_PORTA6)
 200:	86 30       	cpi	r24, 0x06	; 6
 202:	91 05       	cpc	r25, r1
 204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x188>
		  PORTA |= (1<<PA6);
 206:	de 9a       	sbi	0x1b, 6	; 27
 208:	08 95       	ret
		else if(a == eS_PORTA7)
 20a:	87 30       	cpi	r24, 0x07	; 7
 20c:	91 05       	cpc	r25, r1
 20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x192>
		  PORTA |= (1<<PA7);
 210:	df 9a       	sbi	0x1b, 7	; 27
 212:	08 95       	ret
		else if(a == eS_PORTB0)
 214:	8a 30       	cpi	r24, 0x0A	; 10
 216:	91 05       	cpc	r25, r1
 218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
 21a:	c0 9a       	sbi	0x18, 0	; 24
 21c:	08 95       	ret
		else if(a == eS_PORTB1)
 21e:	8b 30       	cpi	r24, 0x0B	; 11
 220:	91 05       	cpc	r25, r1
 222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
 224:	c1 9a       	sbi	0x18, 1	; 24
 226:	08 95       	ret
		else if(a == eS_PORTB2)
 228:	8c 30       	cpi	r24, 0x0C	; 12
 22a:	91 05       	cpc	r25, r1
 22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
 22e:	c2 9a       	sbi	0x18, 2	; 24
 230:	08 95       	ret
		else if(a == eS_PORTB3)
 232:	8d 30       	cpi	r24, 0x0D	; 13
 234:	91 05       	cpc	r25, r1
 236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
 238:	c3 9a       	sbi	0x18, 3	; 24
 23a:	08 95       	ret
		else if(a == eS_PORTB4)
 23c:	8e 30       	cpi	r24, 0x0E	; 14
 23e:	91 05       	cpc	r25, r1
 240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
 242:	c4 9a       	sbi	0x18, 4	; 24
 244:	08 95       	ret
		else if(a == eS_PORTB5)
 246:	8f 30       	cpi	r24, 0x0F	; 15
 248:	91 05       	cpc	r25, r1
 24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
 24c:	c5 9a       	sbi	0x18, 5	; 24
 24e:	08 95       	ret
		else if(a == eS_PORTB6)
 250:	80 31       	cpi	r24, 0x10	; 16
 252:	91 05       	cpc	r25, r1
 254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
 256:	c6 9a       	sbi	0x18, 6	; 24
 258:	08 95       	ret
		else if(a == eS_PORTB7)
 25a:	81 31       	cpi	r24, 0x11	; 17
 25c:	91 05       	cpc	r25, r1
 25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
 260:	c7 9a       	sbi	0x18, 7	; 24
 262:	08 95       	ret
		else if(a == eS_PORTC0)
 264:	84 31       	cpi	r24, 0x14	; 20
 266:	91 05       	cpc	r25, r1
 268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
 26a:	a8 9a       	sbi	0x15, 0	; 21
 26c:	08 95       	ret
		else if(a == eS_PORTC1)
 26e:	85 31       	cpi	r24, 0x15	; 21
 270:	91 05       	cpc	r25, r1
 272:	11 f4       	brne	.+4      	; 0x278 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
 274:	a9 9a       	sbi	0x15, 1	; 21
 276:	08 95       	ret
		else if(a == eS_PORTC2)
 278:	86 31       	cpi	r24, 0x16	; 22
 27a:	91 05       	cpc	r25, r1
 27c:	11 f4       	brne	.+4      	; 0x282 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
 27e:	aa 9a       	sbi	0x15, 2	; 21
 280:	08 95       	ret
		else if(a == eS_PORTC3)
 282:	87 31       	cpi	r24, 0x17	; 23
 284:	91 05       	cpc	r25, r1
 286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
 288:	ab 9a       	sbi	0x15, 3	; 21
 28a:	08 95       	ret
		else if(a == eS_PORTC4)
 28c:	88 31       	cpi	r24, 0x18	; 24
 28e:	91 05       	cpc	r25, r1
 290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0x214>
		  PORTC |= (1<<PC4);
 292:	ac 9a       	sbi	0x15, 4	; 21
 294:	08 95       	ret
		else if(a == eS_PORTC5)
 296:	89 31       	cpi	r24, 0x19	; 25
 298:	91 05       	cpc	r25, r1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
 29c:	ad 9a       	sbi	0x15, 5	; 21
 29e:	08 95       	ret
		else if(a == eS_PORTC6)
 2a0:	8a 31       	cpi	r24, 0x1A	; 26
 2a2:	91 05       	cpc	r25, r1
 2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x228>
		  PORTC |= (1<<PC6);  
 2a6:	ae 9a       	sbi	0x15, 6	; 21
 2a8:	08 95       	ret
		else if(a == eS_PORTC7)
 2aa:	8b 31       	cpi	r24, 0x1B	; 27
 2ac:	91 05       	cpc	r25, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
 2b0:	af 9a       	sbi	0x15, 7	; 21
 2b2:	08 95       	ret
		else if(a == eS_PORTD0)
 2b4:	8e 31       	cpi	r24, 0x1E	; 30
 2b6:	91 05       	cpc	r25, r1
 2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x23c>
		  PORTD |= (1<<PD0);
 2ba:	90 9a       	sbi	0x12, 0	; 18
 2bc:	08 95       	ret
		else if(a == eS_PORTD1)
 2be:	8f 31       	cpi	r24, 0x1F	; 31
 2c0:	91 05       	cpc	r25, r1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
 2c4:	91 9a       	sbi	0x12, 1	; 18
 2c6:	08 95       	ret
		else if(a == eS_PORTD2)
 2c8:	80 32       	cpi	r24, 0x20	; 32
 2ca:	91 05       	cpc	r25, r1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
 2ce:	92 9a       	sbi	0x12, 2	; 18
 2d0:	08 95       	ret
		else if(a == eS_PORTD3)
 2d2:	81 32       	cpi	r24, 0x21	; 33
 2d4:	91 05       	cpc	r25, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <pinChange+0x25a>
		  PORTD |= (1<<PD3);
 2d8:	93 9a       	sbi	0x12, 3	; 18
 2da:	08 95       	ret
		else if(a == eS_PORTD4)
 2dc:	82 32       	cpi	r24, 0x22	; 34
 2de:	91 05       	cpc	r25, r1
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
 2e2:	94 9a       	sbi	0x12, 4	; 18
 2e4:	08 95       	ret
		else if(a == eS_PORTD5)
 2e6:	83 32       	cpi	r24, 0x23	; 35
 2e8:	91 05       	cpc	r25, r1
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2ec:	95 9a       	sbi	0x12, 5	; 18
 2ee:	08 95       	ret
		else if(a == eS_PORTD6)
 2f0:	84 32       	cpi	r24, 0x24	; 36
 2f2:	91 05       	cpc	r25, r1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <pinChange+0x278>
		  PORTD |= (1<<PD6);
 2f6:	96 9a       	sbi	0x12, 6	; 18
 2f8:	08 95       	ret
		else if(a == eS_PORTD7)
 2fa:	85 97       	sbiw	r24, 0x25	; 37
 2fc:	09 f4       	brne	.+2      	; 0x300 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
 2fe:	97 9a       	sbi	0x12, 7	; 18
 300:	08 95       	ret

00000302 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 302:	cf 93       	push	r28
 304:	c8 2f       	mov	r28, r24
	if(a & 1)
 306:	80 ff       	sbrs	r24, 0
 308:	07 c0       	rjmp	.+14     	; 0x318 <Lcd4_Port+0x16>
	pinChange(D4,1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	82 e2       	ldi	r24, 0x22	; 34
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 316:	06 c0       	rjmp	.+12     	; 0x324 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	82 e2       	ldi	r24, 0x22	; 34
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 2)
 324:	c1 ff       	sbrs	r28, 1
 326:	07 c0       	rjmp	.+14     	; 0x336 <Lcd4_Port+0x34>
	pinChange(D5,1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	83 e2       	ldi	r24, 0x23	; 35
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 334:	06 c0       	rjmp	.+12     	; 0x342 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	83 e2       	ldi	r24, 0x23	; 35
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 4)
 342:	c2 ff       	sbrs	r28, 2
 344:	07 c0       	rjmp	.+14     	; 0x354 <Lcd4_Port+0x52>
	pinChange(D6,1);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	84 e2       	ldi	r24, 0x24	; 36
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 352:	06 c0       	rjmp	.+12     	; 0x360 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	84 e2       	ldi	r24, 0x24	; 36
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 8)
 360:	c3 ff       	sbrs	r28, 3
 362:	07 c0       	rjmp	.+14     	; 0x372 <Lcd4_Port+0x70>
	pinChange(D7,1);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	85 e2       	ldi	r24, 0x25	; 37
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 370:	06 c0       	rjmp	.+12     	; 0x37e <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	85 e2       	ldi	r24, 0x25	; 37
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
}
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 382:	cf 93       	push	r28
 384:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	8a e1       	ldi	r24, 0x1A	; 26
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(a);
 392:	8c 2f       	mov	r24, r28
 394:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	8b e1       	ldi	r24, 0x1B	; 27
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	89 ef       	ldi	r24, 0xF9	; 249
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Lcd4_Cmd+0x26>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <Lcd4_Cmd+0x2c>
 3ae:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	8b e1       	ldi	r24, 0x1B	; 27
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 3bc:	89 ef       	ldi	r24, 0xF9	; 249
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <Lcd4_Cmd+0x3e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <Lcd4_Cmd+0x44>
 3c6:	00 00       	nop
	_delay_ms(1);
}
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <Lcd4_Set_Cursor>:
	Lcd4_Cmd(0);
	Lcd4_Cmd(1);
}

void Lcd4_Set_Cursor(char a, char b)
{
 3cc:	cf 93       	push	r28
 3ce:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	59 f4       	brne	.+22     	; 0x3ea <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
 3d4:	80 e8       	ldi	r24, 0x80	; 128
 3d6:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 3d8:	82 95       	swap	r24
 3da:	8f 70       	andi	r24, 0x0F	; 15
 3dc:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 3e0:	8c 2f       	mov	r24, r28
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
 3e8:	0c c0       	rjmp	.+24     	; 0x402 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	51 f4       	brne	.+20     	; 0x402 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
 3ee:	80 ec       	ldi	r24, 0xC0	; 192
 3f0:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 3f2:	82 95       	swap	r24
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 3fa:	8c 2f       	mov	r24, r28
 3fc:	8f 70       	andi	r24, 0x0F	; 15
 3fe:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	}
}
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
 40c:	87 e8       	ldi	r24, 0x87	; 135
 40e:	93 e1       	ldi	r25, 0x13	; 19
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <Lcd4_Init+0xa>
 414:	00 c0       	rjmp	.+0      	; 0x416 <Lcd4_Init+0x10>
 416:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 418:	83 e0       	ldi	r24, 0x03	; 3
 41a:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
 41e:	81 ee       	ldi	r24, 0xE1	; 225
 420:	94 e0       	ldi	r25, 0x04	; 4
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <Lcd4_Init+0x1c>
 426:	00 c0       	rjmp	.+0      	; 0x428 <Lcd4_Init+0x22>
 428:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
 430:	8d eb       	ldi	r24, 0xBD	; 189
 432:	9a e0       	ldi	r25, 0x0A	; 10
 434:	01 97       	sbiw	r24, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <Lcd4_Init+0x2e>
 438:	00 c0       	rjmp	.+0      	; 0x43a <Lcd4_Init+0x34>
 43a:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 44e:	88 e0       	ldi	r24, 0x08	; 8
 450:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 45a:	8c e0       	ldi	r24, 0x0C	; 12
 45c:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 466:	86 e0       	ldi	r24, 0x06	; 6
 468:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
 46c:	08 95       	ret

0000046e <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 46e:	cf 93       	push	r28
 470:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	8a e1       	ldi	r24, 0x1A	; 26
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 47e:	8c 2f       	mov	r24, r28
 480:	82 95       	swap	r24
 482:	8f 70       	andi	r24, 0x0F	; 15
 484:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	8b e1       	ldi	r24, 0x1B	; 27
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 494:	89 ef       	ldi	r24, 0xF9	; 249
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <Lcd4_Write_Char+0x2a>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <Lcd4_Write_Char+0x30>
 49e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	8b e1       	ldi	r24, 0x1B	; 27
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4ac:	89 ef       	ldi	r24, 0xF9	; 249
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <Lcd4_Write_Char+0x42>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <Lcd4_Write_Char+0x48>
 4b6:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 4b8:	8c 2f       	mov	r24, r28
 4ba:	8f 70       	andi	r24, 0x0F	; 15
 4bc:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	8b e1       	ldi	r24, 0x1B	; 27
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4cc:	89 ef       	ldi	r24, 0xF9	; 249
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <Lcd4_Write_Char+0x62>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <Lcd4_Write_Char+0x68>
 4d6:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	8b e1       	ldi	r24, 0x1B	; 27
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4e4:	89 ef       	ldi	r24, 0xF9	; 249
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <Lcd4_Write_Char+0x7a>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <Lcd4_Write_Char+0x80>
 4ee:	00 00       	nop
	_delay_ms(1);
}
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 4fa:	88 81       	ld	r24, Y
 4fc:	88 23       	and	r24, r24
 4fe:	31 f0       	breq	.+12     	; 0x50c <Lcd4_Write_String+0x18>
 500:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 502:	0e 94 37 02 	call	0x46e	; 0x46e <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 506:	89 91       	ld	r24, Y+
 508:	81 11       	cpse	r24, r1
 50a:	fb cf       	rjmp	.-10     	; 0x502 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <adc_init>:
#include <util/delay.h>
#include "lcd.h"

void adc_init()
{
	ADMUX |= (1<<REFS0);
 512:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 514:	87 e8       	ldi	r24, 0x87	; 135
 516:	86 b9       	out	0x06, r24	; 6
 518:	08 95       	ret

0000051a <read_adc_channel>:
}

uint16_t read_adc_channel(uint8_t channel)
{
	channel = channel & 0b00000111;
	ADMUX |= channel;
 51a:	97 b1       	in	r25, 0x07	; 7
	//SFIOR=0x00;
}

uint16_t read_adc_channel(uint8_t channel)
{
	channel = channel & 0b00000111;
 51c:	87 70       	andi	r24, 0x07	; 7
	ADMUX |= channel;
 51e:	98 2b       	or	r25, r24
 520:	97 b9       	out	0x07, r25	; 7
	
	//start conversion
	ADCSRA |= (1<<ADSC);
 522:	36 9a       	sbi	0x06, 6	; 6
	
	//wait for the conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 524:	34 9b       	sbis	0x06, 4	; 6
 526:	fe cf       	rjmp	.-4      	; 0x524 <read_adc_channel+0xa>
	
	//clear ADIF
	ADCSRA |= (1<<ADIF);
 528:	34 9a       	sbi	0x06, 4	; 6
	
	return ADCW;
 52a:	84 b1       	in	r24, 0x04	; 4
 52c:	95 b1       	in	r25, 0x05	; 5
}
 52e:	08 95       	ret

00000530 <main>:

int main(void)
{
	DDRD=0xFF;
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
 534:	84 bb       	out	0x14, r24	; 20
	DDRA=0x00;
 536:	1a ba       	out	0x1a, r1	; 26
	
	//LCD 
	Lcd4_Init();
 538:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Init>
	Lcd4_Set_Cursor(1,1);
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>
	Lcd4_Write_String("voltage:");
 544:	80 e6       	ldi	r24, 0x60	; 96
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
	
	int d1,d2,d3;
	float pv,dv;
	
	adc_init();
 54c:	0e 94 89 02 	call	0x512	; 0x512 <adc_init>
		
		/*  V=(Vmax*ADC_VALUE)/2^n
		*    =(5*ADC_VALUE)/1023
		*/
		
		dv=read_adc_channel(0);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 8d 02 	call	0x51a	; 0x51a <read_adc_channel>
 556:	bc 01       	movw	r22, r24
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 10 04 	call	0x820	; 0x820 <__floatunsisf>
		pv=(5*dv)/1023;
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	40 ea       	ldi	r20, 0xA0	; 160
 566:	50 e4       	ldi	r21, 0x40	; 64
 568:	0e 94 9e 04 	call	0x93c	; 0x93c <__mulsf3>
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 ec       	ldi	r19, 0xC0	; 192
 570:	4f e7       	ldi	r20, 0x7F	; 127
 572:	54 e4       	ldi	r21, 0x44	; 68
 574:	0e 94 77 03 	call	0x6ee	; 0x6ee <__divsf3>
 578:	6b 01       	movw	r12, r22
 57a:	7c 01       	movw	r14, r24
		
		//---------------------
		//display the float in a.bc format
		d1=pv;
 57c:	0e 94 df 03 	call	0x7be	; 0x7be <__fixsfsi>
 580:	4b 01       	movw	r8, r22
 582:	5c 01       	movw	r10, r24
		pv-=d1;
 584:	88 27       	eor	r24, r24
 586:	77 fd       	sbrc	r23, 7
 588:	80 95       	com	r24
 58a:	98 2f       	mov	r25, r24
 58c:	0e 94 12 04 	call	0x824	; 0x824 <__floatsisf>
 590:	9b 01       	movw	r18, r22
 592:	ac 01       	movw	r20, r24
 594:	c7 01       	movw	r24, r14
 596:	b6 01       	movw	r22, r12
 598:	0e 94 12 03 	call	0x624	; 0x624 <__subsf3>
		pv*=10;
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	40 e2       	ldi	r20, 0x20	; 32
 5a2:	51 e4       	ldi	r21, 0x41	; 65
 5a4:	0e 94 9e 04 	call	0x93c	; 0x93c <__mulsf3>
 5a8:	2b 01       	movw	r4, r22
 5aa:	3c 01       	movw	r6, r24
		
		d2=pv;
 5ac:	0e 94 df 03 	call	0x7be	; 0x7be <__fixsfsi>
 5b0:	6b 01       	movw	r12, r22
 5b2:	7c 01       	movw	r14, r24
		pv-=d2;
 5b4:	88 27       	eor	r24, r24
 5b6:	77 fd       	sbrc	r23, 7
 5b8:	80 95       	com	r24
 5ba:	98 2f       	mov	r25, r24
 5bc:	0e 94 12 04 	call	0x824	; 0x824 <__floatsisf>
 5c0:	9b 01       	movw	r18, r22
 5c2:	ac 01       	movw	r20, r24
 5c4:	c3 01       	movw	r24, r6
 5c6:	b2 01       	movw	r22, r4
 5c8:	0e 94 12 03 	call	0x624	; 0x624 <__subsf3>
 5cc:	2b 01       	movw	r4, r22
 5ce:	3c 01       	movw	r6, r24
		pv*=10;
		
		d3=pv;
		//---------------------
		Lcd4_Set_Cursor(2,1);
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>
		Lcd4_Write_Char(d1+48);
 5d8:	80 e3       	ldi	r24, 0x30	; 48
 5da:	88 0d       	add	r24, r8
 5dc:	0e 94 37 02 	call	0x46e	; 0x46e <Lcd4_Write_Char>
		
		Lcd4_Set_Cursor(2,2);
 5e0:	62 e0       	ldi	r22, 0x02	; 2
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>
		Lcd4_Write_Char('.');
 5e8:	8e e2       	ldi	r24, 0x2E	; 46
 5ea:	0e 94 37 02 	call	0x46e	; 0x46e <Lcd4_Write_Char>
		
		Lcd4_Set_Cursor(2,3);
 5ee:	63 e0       	ldi	r22, 0x03	; 3
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>
		Lcd4_Write_Char(d2+48);
 5f6:	80 e3       	ldi	r24, 0x30	; 48
 5f8:	8c 0d       	add	r24, r12
 5fa:	0e 94 37 02 	call	0x46e	; 0x46e <Lcd4_Write_Char>
		
		Lcd4_Set_Cursor(2,4);
 5fe:	64 e0       	ldi	r22, 0x04	; 4
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>
		pv-=d1;
		pv*=10;
		
		d2=pv;
		pv-=d2;
		pv*=10;
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	40 e2       	ldi	r20, 0x20	; 32
 60c:	51 e4       	ldi	r21, 0x41	; 65
 60e:	c3 01       	movw	r24, r6
 610:	b2 01       	movw	r22, r4
 612:	0e 94 9e 04 	call	0x93c	; 0x93c <__mulsf3>
		
		d3=pv;
 616:	0e 94 df 03 	call	0x7be	; 0x7be <__fixsfsi>
		
		Lcd4_Set_Cursor(2,3);
		Lcd4_Write_Char(d2+48);
		
		Lcd4_Set_Cursor(2,4);
		Lcd4_Write_Char(d3+48);
 61a:	80 e3       	ldi	r24, 0x30	; 48
 61c:	86 0f       	add	r24, r22
 61e:	0e 94 37 02 	call	0x46e	; 0x46e <Lcd4_Write_Char>
 622:	96 cf       	rjmp	.-212    	; 0x550 <main+0x20>

00000624 <__subsf3>:
 624:	50 58       	subi	r21, 0x80	; 128

00000626 <__addsf3>:
 626:	bb 27       	eor	r27, r27
 628:	aa 27       	eor	r26, r26
 62a:	0e d0       	rcall	.+28     	; 0x648 <__addsf3x>
 62c:	4d c1       	rjmp	.+666    	; 0x8c8 <__fp_round>
 62e:	3e d1       	rcall	.+636    	; 0x8ac <__fp_pscA>
 630:	30 f0       	brcs	.+12     	; 0x63e <__addsf3+0x18>
 632:	43 d1       	rcall	.+646    	; 0x8ba <__fp_pscB>
 634:	20 f0       	brcs	.+8      	; 0x63e <__addsf3+0x18>
 636:	31 f4       	brne	.+12     	; 0x644 <__addsf3+0x1e>
 638:	9f 3f       	cpi	r25, 0xFF	; 255
 63a:	11 f4       	brne	.+4      	; 0x640 <__addsf3+0x1a>
 63c:	1e f4       	brtc	.+6      	; 0x644 <__addsf3+0x1e>
 63e:	33 c1       	rjmp	.+614    	; 0x8a6 <__fp_nan>
 640:	0e f4       	brtc	.+2      	; 0x644 <__addsf3+0x1e>
 642:	e0 95       	com	r30
 644:	e7 fb       	bst	r30, 7
 646:	29 c1       	rjmp	.+594    	; 0x89a <__fp_inf>

00000648 <__addsf3x>:
 648:	e9 2f       	mov	r30, r25
 64a:	4f d1       	rcall	.+670    	; 0x8ea <__fp_split3>
 64c:	80 f3       	brcs	.-32     	; 0x62e <__addsf3+0x8>
 64e:	ba 17       	cp	r27, r26
 650:	62 07       	cpc	r22, r18
 652:	73 07       	cpc	r23, r19
 654:	84 07       	cpc	r24, r20
 656:	95 07       	cpc	r25, r21
 658:	18 f0       	brcs	.+6      	; 0x660 <__addsf3x+0x18>
 65a:	71 f4       	brne	.+28     	; 0x678 <__addsf3x+0x30>
 65c:	9e f5       	brtc	.+102    	; 0x6c4 <__addsf3x+0x7c>
 65e:	67 c1       	rjmp	.+718    	; 0x92e <__fp_zero>
 660:	0e f4       	brtc	.+2      	; 0x664 <__addsf3x+0x1c>
 662:	e0 95       	com	r30
 664:	0b 2e       	mov	r0, r27
 666:	ba 2f       	mov	r27, r26
 668:	a0 2d       	mov	r26, r0
 66a:	0b 01       	movw	r0, r22
 66c:	b9 01       	movw	r22, r18
 66e:	90 01       	movw	r18, r0
 670:	0c 01       	movw	r0, r24
 672:	ca 01       	movw	r24, r20
 674:	a0 01       	movw	r20, r0
 676:	11 24       	eor	r1, r1
 678:	ff 27       	eor	r31, r31
 67a:	59 1b       	sub	r21, r25
 67c:	99 f0       	breq	.+38     	; 0x6a4 <__addsf3x+0x5c>
 67e:	59 3f       	cpi	r21, 0xF9	; 249
 680:	50 f4       	brcc	.+20     	; 0x696 <__addsf3x+0x4e>
 682:	50 3e       	cpi	r21, 0xE0	; 224
 684:	68 f1       	brcs	.+90     	; 0x6e0 <__addsf3x+0x98>
 686:	1a 16       	cp	r1, r26
 688:	f0 40       	sbci	r31, 0x00	; 0
 68a:	a2 2f       	mov	r26, r18
 68c:	23 2f       	mov	r18, r19
 68e:	34 2f       	mov	r19, r20
 690:	44 27       	eor	r20, r20
 692:	58 5f       	subi	r21, 0xF8	; 248
 694:	f3 cf       	rjmp	.-26     	; 0x67c <__addsf3x+0x34>
 696:	46 95       	lsr	r20
 698:	37 95       	ror	r19
 69a:	27 95       	ror	r18
 69c:	a7 95       	ror	r26
 69e:	f0 40       	sbci	r31, 0x00	; 0
 6a0:	53 95       	inc	r21
 6a2:	c9 f7       	brne	.-14     	; 0x696 <__addsf3x+0x4e>
 6a4:	7e f4       	brtc	.+30     	; 0x6c4 <__addsf3x+0x7c>
 6a6:	1f 16       	cp	r1, r31
 6a8:	ba 0b       	sbc	r27, r26
 6aa:	62 0b       	sbc	r22, r18
 6ac:	73 0b       	sbc	r23, r19
 6ae:	84 0b       	sbc	r24, r20
 6b0:	ba f0       	brmi	.+46     	; 0x6e0 <__addsf3x+0x98>
 6b2:	91 50       	subi	r25, 0x01	; 1
 6b4:	a1 f0       	breq	.+40     	; 0x6de <__addsf3x+0x96>
 6b6:	ff 0f       	add	r31, r31
 6b8:	bb 1f       	adc	r27, r27
 6ba:	66 1f       	adc	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	88 1f       	adc	r24, r24
 6c0:	c2 f7       	brpl	.-16     	; 0x6b2 <__addsf3x+0x6a>
 6c2:	0e c0       	rjmp	.+28     	; 0x6e0 <__addsf3x+0x98>
 6c4:	ba 0f       	add	r27, r26
 6c6:	62 1f       	adc	r22, r18
 6c8:	73 1f       	adc	r23, r19
 6ca:	84 1f       	adc	r24, r20
 6cc:	48 f4       	brcc	.+18     	; 0x6e0 <__addsf3x+0x98>
 6ce:	87 95       	ror	r24
 6d0:	77 95       	ror	r23
 6d2:	67 95       	ror	r22
 6d4:	b7 95       	ror	r27
 6d6:	f7 95       	ror	r31
 6d8:	9e 3f       	cpi	r25, 0xFE	; 254
 6da:	08 f0       	brcs	.+2      	; 0x6de <__addsf3x+0x96>
 6dc:	b3 cf       	rjmp	.-154    	; 0x644 <__addsf3+0x1e>
 6de:	93 95       	inc	r25
 6e0:	88 0f       	add	r24, r24
 6e2:	08 f0       	brcs	.+2      	; 0x6e6 <__addsf3x+0x9e>
 6e4:	99 27       	eor	r25, r25
 6e6:	ee 0f       	add	r30, r30
 6e8:	97 95       	ror	r25
 6ea:	87 95       	ror	r24
 6ec:	08 95       	ret

000006ee <__divsf3>:
 6ee:	0c d0       	rcall	.+24     	; 0x708 <__divsf3x>
 6f0:	eb c0       	rjmp	.+470    	; 0x8c8 <__fp_round>
 6f2:	e3 d0       	rcall	.+454    	; 0x8ba <__fp_pscB>
 6f4:	40 f0       	brcs	.+16     	; 0x706 <__divsf3+0x18>
 6f6:	da d0       	rcall	.+436    	; 0x8ac <__fp_pscA>
 6f8:	30 f0       	brcs	.+12     	; 0x706 <__divsf3+0x18>
 6fa:	21 f4       	brne	.+8      	; 0x704 <__divsf3+0x16>
 6fc:	5f 3f       	cpi	r21, 0xFF	; 255
 6fe:	19 f0       	breq	.+6      	; 0x706 <__divsf3+0x18>
 700:	cc c0       	rjmp	.+408    	; 0x89a <__fp_inf>
 702:	51 11       	cpse	r21, r1
 704:	15 c1       	rjmp	.+554    	; 0x930 <__fp_szero>
 706:	cf c0       	rjmp	.+414    	; 0x8a6 <__fp_nan>

00000708 <__divsf3x>:
 708:	f0 d0       	rcall	.+480    	; 0x8ea <__fp_split3>
 70a:	98 f3       	brcs	.-26     	; 0x6f2 <__divsf3+0x4>

0000070c <__divsf3_pse>:
 70c:	99 23       	and	r25, r25
 70e:	c9 f3       	breq	.-14     	; 0x702 <__divsf3+0x14>
 710:	55 23       	and	r21, r21
 712:	b1 f3       	breq	.-20     	; 0x700 <__divsf3+0x12>
 714:	95 1b       	sub	r25, r21
 716:	55 0b       	sbc	r21, r21
 718:	bb 27       	eor	r27, r27
 71a:	aa 27       	eor	r26, r26
 71c:	62 17       	cp	r22, r18
 71e:	73 07       	cpc	r23, r19
 720:	84 07       	cpc	r24, r20
 722:	38 f0       	brcs	.+14     	; 0x732 <__divsf3_pse+0x26>
 724:	9f 5f       	subi	r25, 0xFF	; 255
 726:	5f 4f       	sbci	r21, 0xFF	; 255
 728:	22 0f       	add	r18, r18
 72a:	33 1f       	adc	r19, r19
 72c:	44 1f       	adc	r20, r20
 72e:	aa 1f       	adc	r26, r26
 730:	a9 f3       	breq	.-22     	; 0x71c <__divsf3_pse+0x10>
 732:	33 d0       	rcall	.+102    	; 0x79a <__divsf3_pse+0x8e>
 734:	0e 2e       	mov	r0, r30
 736:	3a f0       	brmi	.+14     	; 0x746 <__divsf3_pse+0x3a>
 738:	e0 e8       	ldi	r30, 0x80	; 128
 73a:	30 d0       	rcall	.+96     	; 0x79c <__divsf3_pse+0x90>
 73c:	91 50       	subi	r25, 0x01	; 1
 73e:	50 40       	sbci	r21, 0x00	; 0
 740:	e6 95       	lsr	r30
 742:	00 1c       	adc	r0, r0
 744:	ca f7       	brpl	.-14     	; 0x738 <__divsf3_pse+0x2c>
 746:	29 d0       	rcall	.+82     	; 0x79a <__divsf3_pse+0x8e>
 748:	fe 2f       	mov	r31, r30
 74a:	27 d0       	rcall	.+78     	; 0x79a <__divsf3_pse+0x8e>
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	bb 1f       	adc	r27, r27
 754:	26 17       	cp	r18, r22
 756:	37 07       	cpc	r19, r23
 758:	48 07       	cpc	r20, r24
 75a:	ab 07       	cpc	r26, r27
 75c:	b0 e8       	ldi	r27, 0x80	; 128
 75e:	09 f0       	breq	.+2      	; 0x762 <__divsf3_pse+0x56>
 760:	bb 0b       	sbc	r27, r27
 762:	80 2d       	mov	r24, r0
 764:	bf 01       	movw	r22, r30
 766:	ff 27       	eor	r31, r31
 768:	93 58       	subi	r25, 0x83	; 131
 76a:	5f 4f       	sbci	r21, 0xFF	; 255
 76c:	2a f0       	brmi	.+10     	; 0x778 <__divsf3_pse+0x6c>
 76e:	9e 3f       	cpi	r25, 0xFE	; 254
 770:	51 05       	cpc	r21, r1
 772:	68 f0       	brcs	.+26     	; 0x78e <__divsf3_pse+0x82>
 774:	92 c0       	rjmp	.+292    	; 0x89a <__fp_inf>
 776:	dc c0       	rjmp	.+440    	; 0x930 <__fp_szero>
 778:	5f 3f       	cpi	r21, 0xFF	; 255
 77a:	ec f3       	brlt	.-6      	; 0x776 <__divsf3_pse+0x6a>
 77c:	98 3e       	cpi	r25, 0xE8	; 232
 77e:	dc f3       	brlt	.-10     	; 0x776 <__divsf3_pse+0x6a>
 780:	86 95       	lsr	r24
 782:	77 95       	ror	r23
 784:	67 95       	ror	r22
 786:	b7 95       	ror	r27
 788:	f7 95       	ror	r31
 78a:	9f 5f       	subi	r25, 0xFF	; 255
 78c:	c9 f7       	brne	.-14     	; 0x780 <__divsf3_pse+0x74>
 78e:	88 0f       	add	r24, r24
 790:	91 1d       	adc	r25, r1
 792:	96 95       	lsr	r25
 794:	87 95       	ror	r24
 796:	97 f9       	bld	r25, 7
 798:	08 95       	ret
 79a:	e1 e0       	ldi	r30, 0x01	; 1
 79c:	66 0f       	add	r22, r22
 79e:	77 1f       	adc	r23, r23
 7a0:	88 1f       	adc	r24, r24
 7a2:	bb 1f       	adc	r27, r27
 7a4:	62 17       	cp	r22, r18
 7a6:	73 07       	cpc	r23, r19
 7a8:	84 07       	cpc	r24, r20
 7aa:	ba 07       	cpc	r27, r26
 7ac:	20 f0       	brcs	.+8      	; 0x7b6 <__divsf3_pse+0xaa>
 7ae:	62 1b       	sub	r22, r18
 7b0:	73 0b       	sbc	r23, r19
 7b2:	84 0b       	sbc	r24, r20
 7b4:	ba 0b       	sbc	r27, r26
 7b6:	ee 1f       	adc	r30, r30
 7b8:	88 f7       	brcc	.-30     	; 0x79c <__divsf3_pse+0x90>
 7ba:	e0 95       	com	r30
 7bc:	08 95       	ret

000007be <__fixsfsi>:
 7be:	04 d0       	rcall	.+8      	; 0x7c8 <__fixunssfsi>
 7c0:	68 94       	set
 7c2:	b1 11       	cpse	r27, r1
 7c4:	b5 c0       	rjmp	.+362    	; 0x930 <__fp_szero>
 7c6:	08 95       	ret

000007c8 <__fixunssfsi>:
 7c8:	98 d0       	rcall	.+304    	; 0x8fa <__fp_splitA>
 7ca:	88 f0       	brcs	.+34     	; 0x7ee <__fixunssfsi+0x26>
 7cc:	9f 57       	subi	r25, 0x7F	; 127
 7ce:	90 f0       	brcs	.+36     	; 0x7f4 <__fixunssfsi+0x2c>
 7d0:	b9 2f       	mov	r27, r25
 7d2:	99 27       	eor	r25, r25
 7d4:	b7 51       	subi	r27, 0x17	; 23
 7d6:	a0 f0       	brcs	.+40     	; 0x800 <__fixunssfsi+0x38>
 7d8:	d1 f0       	breq	.+52     	; 0x80e <__fixunssfsi+0x46>
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	88 1f       	adc	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	1a f0       	brmi	.+6      	; 0x7ea <__fixunssfsi+0x22>
 7e4:	ba 95       	dec	r27
 7e6:	c9 f7       	brne	.-14     	; 0x7da <__fixunssfsi+0x12>
 7e8:	12 c0       	rjmp	.+36     	; 0x80e <__fixunssfsi+0x46>
 7ea:	b1 30       	cpi	r27, 0x01	; 1
 7ec:	81 f0       	breq	.+32     	; 0x80e <__fixunssfsi+0x46>
 7ee:	9f d0       	rcall	.+318    	; 0x92e <__fp_zero>
 7f0:	b1 e0       	ldi	r27, 0x01	; 1
 7f2:	08 95       	ret
 7f4:	9c c0       	rjmp	.+312    	; 0x92e <__fp_zero>
 7f6:	67 2f       	mov	r22, r23
 7f8:	78 2f       	mov	r23, r24
 7fa:	88 27       	eor	r24, r24
 7fc:	b8 5f       	subi	r27, 0xF8	; 248
 7fe:	39 f0       	breq	.+14     	; 0x80e <__fixunssfsi+0x46>
 800:	b9 3f       	cpi	r27, 0xF9	; 249
 802:	cc f3       	brlt	.-14     	; 0x7f6 <__fixunssfsi+0x2e>
 804:	86 95       	lsr	r24
 806:	77 95       	ror	r23
 808:	67 95       	ror	r22
 80a:	b3 95       	inc	r27
 80c:	d9 f7       	brne	.-10     	; 0x804 <__fixunssfsi+0x3c>
 80e:	3e f4       	brtc	.+14     	; 0x81e <__fixunssfsi+0x56>
 810:	90 95       	com	r25
 812:	80 95       	com	r24
 814:	70 95       	com	r23
 816:	61 95       	neg	r22
 818:	7f 4f       	sbci	r23, 0xFF	; 255
 81a:	8f 4f       	sbci	r24, 0xFF	; 255
 81c:	9f 4f       	sbci	r25, 0xFF	; 255
 81e:	08 95       	ret

00000820 <__floatunsisf>:
 820:	e8 94       	clt
 822:	09 c0       	rjmp	.+18     	; 0x836 <__floatsisf+0x12>

00000824 <__floatsisf>:
 824:	97 fb       	bst	r25, 7
 826:	3e f4       	brtc	.+14     	; 0x836 <__floatsisf+0x12>
 828:	90 95       	com	r25
 82a:	80 95       	com	r24
 82c:	70 95       	com	r23
 82e:	61 95       	neg	r22
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	99 23       	and	r25, r25
 838:	a9 f0       	breq	.+42     	; 0x864 <__stack+0x5>
 83a:	f9 2f       	mov	r31, r25
 83c:	96 e9       	ldi	r25, 0x96	; 150
 83e:	bb 27       	eor	r27, r27
 840:	93 95       	inc	r25
 842:	f6 95       	lsr	r31
 844:	87 95       	ror	r24
 846:	77 95       	ror	r23
 848:	67 95       	ror	r22
 84a:	b7 95       	ror	r27
 84c:	f1 11       	cpse	r31, r1
 84e:	f8 cf       	rjmp	.-16     	; 0x840 <__floatsisf+0x1c>
 850:	fa f4       	brpl	.+62     	; 0x890 <__stack+0x31>
 852:	bb 0f       	add	r27, r27
 854:	11 f4       	brne	.+4      	; 0x85a <__floatsisf+0x36>
 856:	60 ff       	sbrs	r22, 0
 858:	1b c0       	rjmp	.+54     	; 0x890 <__stack+0x31>
 85a:	6f 5f       	subi	r22, 0xFF	; 255
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	16 c0       	rjmp	.+44     	; 0x890 <__stack+0x31>
 864:	88 23       	and	r24, r24
 866:	11 f0       	breq	.+4      	; 0x86c <__stack+0xd>
 868:	96 e9       	ldi	r25, 0x96	; 150
 86a:	11 c0       	rjmp	.+34     	; 0x88e <__stack+0x2f>
 86c:	77 23       	and	r23, r23
 86e:	21 f0       	breq	.+8      	; 0x878 <__stack+0x19>
 870:	9e e8       	ldi	r25, 0x8E	; 142
 872:	87 2f       	mov	r24, r23
 874:	76 2f       	mov	r23, r22
 876:	05 c0       	rjmp	.+10     	; 0x882 <__stack+0x23>
 878:	66 23       	and	r22, r22
 87a:	71 f0       	breq	.+28     	; 0x898 <__stack+0x39>
 87c:	96 e8       	ldi	r25, 0x86	; 134
 87e:	86 2f       	mov	r24, r22
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	2a f0       	brmi	.+10     	; 0x890 <__stack+0x31>
 886:	9a 95       	dec	r25
 888:	66 0f       	add	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	da f7       	brpl	.-10     	; 0x886 <__stack+0x27>
 890:	88 0f       	add	r24, r24
 892:	96 95       	lsr	r25
 894:	87 95       	ror	r24
 896:	97 f9       	bld	r25, 7
 898:	08 95       	ret

0000089a <__fp_inf>:
 89a:	97 f9       	bld	r25, 7
 89c:	9f 67       	ori	r25, 0x7F	; 127
 89e:	80 e8       	ldi	r24, 0x80	; 128
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	08 95       	ret

000008a6 <__fp_nan>:
 8a6:	9f ef       	ldi	r25, 0xFF	; 255
 8a8:	80 ec       	ldi	r24, 0xC0	; 192
 8aa:	08 95       	ret

000008ac <__fp_pscA>:
 8ac:	00 24       	eor	r0, r0
 8ae:	0a 94       	dec	r0
 8b0:	16 16       	cp	r1, r22
 8b2:	17 06       	cpc	r1, r23
 8b4:	18 06       	cpc	r1, r24
 8b6:	09 06       	cpc	r0, r25
 8b8:	08 95       	ret

000008ba <__fp_pscB>:
 8ba:	00 24       	eor	r0, r0
 8bc:	0a 94       	dec	r0
 8be:	12 16       	cp	r1, r18
 8c0:	13 06       	cpc	r1, r19
 8c2:	14 06       	cpc	r1, r20
 8c4:	05 06       	cpc	r0, r21
 8c6:	08 95       	ret

000008c8 <__fp_round>:
 8c8:	09 2e       	mov	r0, r25
 8ca:	03 94       	inc	r0
 8cc:	00 0c       	add	r0, r0
 8ce:	11 f4       	brne	.+4      	; 0x8d4 <__fp_round+0xc>
 8d0:	88 23       	and	r24, r24
 8d2:	52 f0       	brmi	.+20     	; 0x8e8 <__fp_round+0x20>
 8d4:	bb 0f       	add	r27, r27
 8d6:	40 f4       	brcc	.+16     	; 0x8e8 <__fp_round+0x20>
 8d8:	bf 2b       	or	r27, r31
 8da:	11 f4       	brne	.+4      	; 0x8e0 <__fp_round+0x18>
 8dc:	60 ff       	sbrs	r22, 0
 8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__fp_round+0x20>
 8e0:	6f 5f       	subi	r22, 0xFF	; 255
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	8f 4f       	sbci	r24, 0xFF	; 255
 8e6:	9f 4f       	sbci	r25, 0xFF	; 255
 8e8:	08 95       	ret

000008ea <__fp_split3>:
 8ea:	57 fd       	sbrc	r21, 7
 8ec:	90 58       	subi	r25, 0x80	; 128
 8ee:	44 0f       	add	r20, r20
 8f0:	55 1f       	adc	r21, r21
 8f2:	59 f0       	breq	.+22     	; 0x90a <__fp_splitA+0x10>
 8f4:	5f 3f       	cpi	r21, 0xFF	; 255
 8f6:	71 f0       	breq	.+28     	; 0x914 <__fp_splitA+0x1a>
 8f8:	47 95       	ror	r20

000008fa <__fp_splitA>:
 8fa:	88 0f       	add	r24, r24
 8fc:	97 fb       	bst	r25, 7
 8fe:	99 1f       	adc	r25, r25
 900:	61 f0       	breq	.+24     	; 0x91a <__fp_splitA+0x20>
 902:	9f 3f       	cpi	r25, 0xFF	; 255
 904:	79 f0       	breq	.+30     	; 0x924 <__fp_splitA+0x2a>
 906:	87 95       	ror	r24
 908:	08 95       	ret
 90a:	12 16       	cp	r1, r18
 90c:	13 06       	cpc	r1, r19
 90e:	14 06       	cpc	r1, r20
 910:	55 1f       	adc	r21, r21
 912:	f2 cf       	rjmp	.-28     	; 0x8f8 <__fp_split3+0xe>
 914:	46 95       	lsr	r20
 916:	f1 df       	rcall	.-30     	; 0x8fa <__fp_splitA>
 918:	08 c0       	rjmp	.+16     	; 0x92a <__fp_splitA+0x30>
 91a:	16 16       	cp	r1, r22
 91c:	17 06       	cpc	r1, r23
 91e:	18 06       	cpc	r1, r24
 920:	99 1f       	adc	r25, r25
 922:	f1 cf       	rjmp	.-30     	; 0x906 <__fp_splitA+0xc>
 924:	86 95       	lsr	r24
 926:	71 05       	cpc	r23, r1
 928:	61 05       	cpc	r22, r1
 92a:	08 94       	sec
 92c:	08 95       	ret

0000092e <__fp_zero>:
 92e:	e8 94       	clt

00000930 <__fp_szero>:
 930:	bb 27       	eor	r27, r27
 932:	66 27       	eor	r22, r22
 934:	77 27       	eor	r23, r23
 936:	cb 01       	movw	r24, r22
 938:	97 f9       	bld	r25, 7
 93a:	08 95       	ret

0000093c <__mulsf3>:
 93c:	0b d0       	rcall	.+22     	; 0x954 <__mulsf3x>
 93e:	c4 cf       	rjmp	.-120    	; 0x8c8 <__fp_round>
 940:	b5 df       	rcall	.-150    	; 0x8ac <__fp_pscA>
 942:	28 f0       	brcs	.+10     	; 0x94e <__mulsf3+0x12>
 944:	ba df       	rcall	.-140    	; 0x8ba <__fp_pscB>
 946:	18 f0       	brcs	.+6      	; 0x94e <__mulsf3+0x12>
 948:	95 23       	and	r25, r21
 94a:	09 f0       	breq	.+2      	; 0x94e <__mulsf3+0x12>
 94c:	a6 cf       	rjmp	.-180    	; 0x89a <__fp_inf>
 94e:	ab cf       	rjmp	.-170    	; 0x8a6 <__fp_nan>
 950:	11 24       	eor	r1, r1
 952:	ee cf       	rjmp	.-36     	; 0x930 <__fp_szero>

00000954 <__mulsf3x>:
 954:	ca df       	rcall	.-108    	; 0x8ea <__fp_split3>
 956:	a0 f3       	brcs	.-24     	; 0x940 <__mulsf3+0x4>

00000958 <__mulsf3_pse>:
 958:	95 9f       	mul	r25, r21
 95a:	d1 f3       	breq	.-12     	; 0x950 <__mulsf3+0x14>
 95c:	95 0f       	add	r25, r21
 95e:	50 e0       	ldi	r21, 0x00	; 0
 960:	55 1f       	adc	r21, r21
 962:	62 9f       	mul	r22, r18
 964:	f0 01       	movw	r30, r0
 966:	72 9f       	mul	r23, r18
 968:	bb 27       	eor	r27, r27
 96a:	f0 0d       	add	r31, r0
 96c:	b1 1d       	adc	r27, r1
 96e:	63 9f       	mul	r22, r19
 970:	aa 27       	eor	r26, r26
 972:	f0 0d       	add	r31, r0
 974:	b1 1d       	adc	r27, r1
 976:	aa 1f       	adc	r26, r26
 978:	64 9f       	mul	r22, r20
 97a:	66 27       	eor	r22, r22
 97c:	b0 0d       	add	r27, r0
 97e:	a1 1d       	adc	r26, r1
 980:	66 1f       	adc	r22, r22
 982:	82 9f       	mul	r24, r18
 984:	22 27       	eor	r18, r18
 986:	b0 0d       	add	r27, r0
 988:	a1 1d       	adc	r26, r1
 98a:	62 1f       	adc	r22, r18
 98c:	73 9f       	mul	r23, r19
 98e:	b0 0d       	add	r27, r0
 990:	a1 1d       	adc	r26, r1
 992:	62 1f       	adc	r22, r18
 994:	83 9f       	mul	r24, r19
 996:	a0 0d       	add	r26, r0
 998:	61 1d       	adc	r22, r1
 99a:	22 1f       	adc	r18, r18
 99c:	74 9f       	mul	r23, r20
 99e:	33 27       	eor	r19, r19
 9a0:	a0 0d       	add	r26, r0
 9a2:	61 1d       	adc	r22, r1
 9a4:	23 1f       	adc	r18, r19
 9a6:	84 9f       	mul	r24, r20
 9a8:	60 0d       	add	r22, r0
 9aa:	21 1d       	adc	r18, r1
 9ac:	82 2f       	mov	r24, r18
 9ae:	76 2f       	mov	r23, r22
 9b0:	6a 2f       	mov	r22, r26
 9b2:	11 24       	eor	r1, r1
 9b4:	9f 57       	subi	r25, 0x7F	; 127
 9b6:	50 40       	sbci	r21, 0x00	; 0
 9b8:	8a f0       	brmi	.+34     	; 0x9dc <__mulsf3_pse+0x84>
 9ba:	e1 f0       	breq	.+56     	; 0x9f4 <__mulsf3_pse+0x9c>
 9bc:	88 23       	and	r24, r24
 9be:	4a f0       	brmi	.+18     	; 0x9d2 <__mulsf3_pse+0x7a>
 9c0:	ee 0f       	add	r30, r30
 9c2:	ff 1f       	adc	r31, r31
 9c4:	bb 1f       	adc	r27, r27
 9c6:	66 1f       	adc	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	88 1f       	adc	r24, r24
 9cc:	91 50       	subi	r25, 0x01	; 1
 9ce:	50 40       	sbci	r21, 0x00	; 0
 9d0:	a9 f7       	brne	.-22     	; 0x9bc <__mulsf3_pse+0x64>
 9d2:	9e 3f       	cpi	r25, 0xFE	; 254
 9d4:	51 05       	cpc	r21, r1
 9d6:	70 f0       	brcs	.+28     	; 0x9f4 <__mulsf3_pse+0x9c>
 9d8:	60 cf       	rjmp	.-320    	; 0x89a <__fp_inf>
 9da:	aa cf       	rjmp	.-172    	; 0x930 <__fp_szero>
 9dc:	5f 3f       	cpi	r21, 0xFF	; 255
 9de:	ec f3       	brlt	.-6      	; 0x9da <__mulsf3_pse+0x82>
 9e0:	98 3e       	cpi	r25, 0xE8	; 232
 9e2:	dc f3       	brlt	.-10     	; 0x9da <__mulsf3_pse+0x82>
 9e4:	86 95       	lsr	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f7 95       	ror	r31
 9ee:	e7 95       	ror	r30
 9f0:	9f 5f       	subi	r25, 0xFF	; 255
 9f2:	c1 f7       	brne	.-16     	; 0x9e4 <__mulsf3_pse+0x8c>
 9f4:	fe 2b       	or	r31, r30
 9f6:	88 0f       	add	r24, r24
 9f8:	91 1d       	adc	r25, r1
 9fa:	96 95       	lsr	r25
 9fc:	87 95       	ror	r24
 9fe:	97 f9       	bld	r25, 7
 a00:	08 95       	ret

00000a02 <_exit>:
 a02:	f8 94       	cli

00000a04 <__stop_program>:
 a04:	ff cf       	rjmp	.-2      	; 0xa04 <__stop_program>
